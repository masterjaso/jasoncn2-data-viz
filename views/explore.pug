extends layout

block header
  head
  meta(charset='UTF-8')
  title Responsive & Accessible Data Table
  style.
    /* NOTE: The styles were added inline because Prefixfree needs access to your styles and they must be inlined if they are on local disk! */
    * {
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
    }
    *:before, *:after {
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
    }
    body {

    font-family: "Helvetica Neue", "Helvetica", "Roboto", "Arial", sans-serif;
    color: #5e5d52;
    }
    a {
    color: #337aa8;
    }
    a:hover, a:focus {
    color: #4b8ab2;
    }
    .container {
    margin: 5% 3%;
    }
    @media (min-width: 48em) {
    .container {
    margin: 2%;
    }
    }
    @media (min-width: 75em) {
    .container {
    margin: 2em auto;
    max-width: 75em;
    }
    }
    .responsive-table {
    width: 50%;
    margin-bottom: 1.5em;
    }
    @media (min-width: 48em) {
    .responsive-table {
    font-size: .9em;
    }
    }
    @media (min-width: 62em) {
    .responsive-table {
    font-size: 1.0em;
    }
    }
    .responsive-table thead {
    position: absolute;
    clip: rect(1px 1px 1px 1px);
    /* IE6, IE7 */
    clip: rect(1px, 1px, 1px, 1px);
    padding: 0;
    border: 0;
    height: 1px;
    width: 1px;
    overflow: hidden;
    }
    @media (min-width: 48em) {
    .responsive-table thead {
    position: relative;
    clip: auto;
    height: auto;
    width: auto;
    overflow: auto;
    }
    }
    .responsive-table thead th {
    background-color: #1d96b2;
    border: 1px solid #1d96b2;
    font-weight: normal;
    text-align: center;
    color: white;
    }
    .responsive-table thead th:first-of-type {
    text-align: left;
    }
    .responsive-table tbody,
    .responsive-table tr,
    .responsive-table th,
    .responsive-table td {
    display: block;
    padding: 0;
    text-align: left;
    white-space: normal;
    }
    @media (min-width: 48em) {
    .responsive-table tr {
    display: table-row;
    }
    }
    .responsive-table th,
    .responsive-table td {
    padding: .5em;
    vertical-align: middle;
    }
    @media (min-width: 30em) {
    .responsive-table th,
    .responsive-table td {
    padding: .75em .5em;
    }
    }
    @media (min-width: 48em) {
    .responsive-table th,
    .responsive-table td {
    display: table-cell;
    padding: .5em;
    }
    }
    @media (min-width: 62em) {
    .responsive-table th,
    .responsive-table td {
    padding: .75em .5em;
    }
    }
    @media (min-width: 75em) {
    .responsive-table th,
    .responsive-table td {
    padding: .75em;
    }
    }
    .responsive-table caption {
    margin-bottom: 1em;
    font-size: 1em;
    font-weight: bold;
    text-align: center;
    }
    @media (min-width: 48em) {
    .responsive-table caption {
    font-size: 1.0em;
    }
    }
    .responsive-table tfoot {
    font-size: .8em;
    font-style: italic;
    }
    @media (min-width: 62em) {
    .responsive-table tfoot {
    font-size: .9em;
    }
    }
    @media (min-width: 48em) {
    .responsive-table tbody {
    display: table-row-group;
    }
    }
    .responsive-table tbody tr {
    margin-bottom: 1em;
    border: 2px solid #1d96b2;
    }
    @media (min-width: 48em) {
    .responsive-table tbody tr {
    display: table-row;
    border-width: 1px;
    }
    }
    .responsive-table tbody tr:last-of-type {
    margin-bottom: 0;
    }
    @media (min-width: 48em) {
    .responsive-table tbody tr:nth-of-type(even) {
    background-color: rgba(94, 93, 82, 0.1);
    }
    }
    .responsive-table tbody th[scope="row"] {
    background-color: #1d96b2;
    color: white;
    }
    @media (min-width: 48em) {
    .responsive-table tbody th[scope="row"] {
    background-color: transparent;
    color: #5e5d52;
    text-align: left;
    }
    }
    .responsive-table tbody td {
    text-align: right;
    }
    @media (min-width: 30em) {
    .responsive-table tbody td {
    border-bottom: 1px solid #1d96b2;
    }
    }
    @media (min-width: 48em) {
    .responsive-table tbody td {
    text-align: center;
    }
    }
    .responsive-table tbody td[data-type=currency] {
    text-align: center;
    }
    .responsive-table tbody td[data-title]:before {
    content: attr(data-title);
    float: left;
    font-size: .8em;
    color: rgba(94, 93, 82, 0.75);
    }
    @media (min-width: 30em) {
    .responsive-table tbody td[data-title]:before {
    font-size: .9em;
    }
    }
    @media (min-width: 48em) {
    .responsive-table tbody td[data-title]:before {
    content: none;
    }
    }
  script(src='https://cdnjs.cloudflare.com/ajax/libs/prefixfree/1.0.7/prefixfree.min.js')
  
  style.
    .loader {
      border: 16px solid #f3f3f3; /* Light grey */
      border-top: 16px solid #3498db; /* Blue */
      border-radius: 50%;
      width: 120px;
      height: 120px;
      animation: spin 2s linear infinite;
    }

    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

block content
  h1=title
  p Welcome to the Explorer!
  p Here you can find interesting data sets and set your favorite filters
  
  h1=message
  
  div.container.row
    div
      form(action="/explore" method="post")
        .container
          table.responsive-table
            caption Data Explorer
            thead
              tr
                th(data-title='Studio') Item
                th(data-title='Studio') Entry

            tbody
              tr
                th(data-title='Studio') Data Set
                td(data-title='Studio') 
                  select#data_sel.form-control(type="text" name="data_set" required)
                    option(value='')
                    option(value='TOT_EMP_NATION') Total Employement Nationwide
                    option(value='TOT_EMP_STATE') Total Employement by State
                    option(value='OCC_BY_STATE') Occupation List by State
                    option(value='DECLINE_JOBS') Declining jobs by year (top 10)
                    option(value='HIGHEST_PAID_YEAR') Highest Paid Job by State
                    option(value='OCC_BY_EDU') Highest Paid Job by State and Education
                    option(value='EMP_STATE_DIST') Employment Distribution by State
                    option(value='DEGREE_DIST') Jobs by Degree
              tr
                th(data-title='Studio') Year
                td(data-title='Studio') 
                  select#year.form-control(type="text" name="year")
                    option(value='')
                    option(value='2014') 2014
                    option(value='2015') 2015
                    option(value='2016') 2016
              tr
                th(data-title='Studio') State
                td(data-title='Studio') 
                  select#state.form-control(type="text" name="state")
                    option(value='')
                    each val, key in state
                      option(value=key) #{val}
              tr
                th(data-title='Studio') Occupation
                td(data-title='Studio')
                  select#occ.form-control(type="text" name="occ")
                    option(value='')
                    each val, key in occ
                      option(value=key) #{val}
              tr
                th(data-title='Studio') Education
                td(data-title='Studio')
                  select#edu.form-control(type="text" name="edu")
                    option(value='')
                    each val, key in edu
                      option(value=key) #{val}
              tr
                th(data-title='Studio') Min Salary
                td(data-title='Studio') 
                  input#minsal.form-control(type="text" name="min_sal" value='')
              tr
                th(data-title='Studio') Max Salary
                td(data-title='Studio') 
                  input#maxsal.form-control(type="text" name="max_sal" value='')
            tfoot
              tr
                th#sub_id(data-title='Studio')
                td(data-title='Studio') 
                  button#subbtn.btn.btn-primary.col-md-6(type="submit") Submit

    div#loader.loader(hidden)
    div#res.container
    div#chart.container
    
    
block footer
  script.
    let draw = false;
    
    function clear_hide(obj){
      o = obj[0];
      o.value = '';
      o.selected = '';
      obj.hide();
    }
    
    function setSelectedValue(selectObj, valueToSet) {
      for (var i = 0; i < selectObj.options.length; i++) {
        if (selectObj.options[i].value == valueToSet) {
            selectObj.options[i].selected = true;
            return;
        }
      }
    }
    
    function getTableData(table) {
      const dataArray = [], idArray = [], metricArray = [];
     
      // loop table rows
      table.rows({ search: "applied" }).every(function() {
        console.log(this.data);
        const data = this.data();
        idArray.push(data[0]);
        metricArray.push(parseInt(data[1].replace(/\,/g, "")));
      });
     
      // store all data in dataArray
      dataArray.push(idArray, metricArray);
     
      return dataArray;
    }
    
    function createHighcharts(data) {
      console.log(data);
      Highcharts.setOptions({
        lang: { thousandsSep: "," }
      });
     
      Highcharts.chart("chart", {
        title: { text: "Results" },
        //subtitle: { text: "Sub-Title" },
        xAxis: [
          {
            categories: data[0],
            labels: { rotation: -45 }
          }
        ],
        yAxis: [
          {
            // first yaxis
            title: { text: "Values" }
          },
          /*  Uncomment this, or add something similar if you want to y-Value sets
          {
            // secondary yaxis
            title: {
              text: "Y-Label-Secondary"
            },
            min: 0,
            opposite: true
          }
          */
        ],
        series: [
          {
            name: "Element",
            color: "#0071A7",
            type: "column",
            data: data[1],
            tooltip: {
              //valueSuffix: " M"
            }
          },
          /*  Uncomment this, or add something similar if you want to y-Value sets
          {
            name: "Density (P/Km²)",
            color: "#FF404E",
            type: "spline",
            data: data[2],
            yAxis: 1
          }
          */
        ],
        tooltip: {
          shared: true
        },
        legend: {
          backgroundColor: "#ececec",
          shadow: true
        },
        credits: {
          enabled: false
        },
        noData: {
          style: {
            fontSize: "16px"
          }
        }
      });
    }
    
    function setTableEvents(table) {
      // listen for page clicks
      table.on("page", () => {
        draw = true;
      });
     
      // listen for updates and adjust the chart accordingly
      table.on("draw", () => {
        if (draw) {
          draw = false;
        } else {
          const tableData = getTableData(table);
          createHighcharts(tableData);
        }
      });
    }
    
    function buildChart() {
      const table = $('.dataTable').DataTable();
      console.log(table);
      const tableData = getTableData(table);
      createHighcharts(tableData);
      setTableEvents(table);
    }
    
    function makeTable(container, data) {
      var table = $("<table/>");
      table.id = 'resTable';
      var head = $("<thead>").append($("<tr>"));
      var foot = $("<tfoot>").append($("<tr>"));
      var body = $("<tbody/>");
      
      $.each(Object.keys(data[0]), function(rowIndex, r) {
        var th = document.createElement("th");
        th.innerText = r;
        head[0].childNodes[0].appendChild(th);
        
        var th2 = document.createElement("th");
        th2.innerText = r;
        foot[0].childNodes[0].appendChild(th2);
      });
      
      table.append(head);
      table.append(foot);
      table.append(body);
      
      $.each(data, function(rowIndex, r) {
          var row = $("<tr/>");
          $.each(r, function(colIndex, c) { 
              row.append($("<td/>").text(c));
          });
          body.append(row);
      });
      
      container.append(table);
      console.log('before DT');
      table.DataTable({});
      console.log('after DT');
      //table.DataTable({
      //  initComplete: function(){
      //    console.log($('.dataTable'));
      //    buildChart();
      //  }
      //});
      
    }
    
    $(document).ready(function(){
      var $form = $('form');
      var $sel = $('#data_sel');
      var $year = $('#year'); 
      var $state = $('#state'); 
      var $occ = $('#occ'); 
      var $edu = $('#edu'); 
      var $minsal = $('#minsal'); 
      var $maxsal = $('#maxsal');
      var $restbl = $('#restbl');
      var $res = $('#res');
      var $chart = $('#chart');
      var $subbtn = $('#subbtn');
      var qString;
      
      $form.submit(function(){
        $('#loader').show();
        $res.empty();
        $chart.empty();
        $('#favbtn').remove();
        var params = $(this).serializeArray();
        params.push({name:'fav', value:'fav'});
        
        $.post($(this).attr('action'), $(this).serialize(), function(response){
          console.log(response);
          if(response.error){
            $('#loader').hide();
            $res.text('Please select all input filters and resubmit...');
            return;
          }
          
          var fav = $("<button/>").addClass('btn btn-primary').text('Favorite');
          fav.attr('id', 'favbtn');
          fav.click( function(d){
            $.ajax({
              type: 'POST',
              url: '/explore',
              data: params,
              success: function(r){console.log(r);},
              dataType: 'json'
            });
            $(this).prop('disabled', true);
          });
          
          $('#sub_id').append(fav);
          
          makeTable($res, response);
          $restbl.show();
          $('#loader').hide();
          console.log('before bc');
          buildChart();
          console.log('after bc');
        },'json');
        return false;
      });
      
      
      $sel.change(function(){
        var ds = this.value;
        console.log('CHANGE:',ds);
        
        //Reset state of all sections
        $year.show(); 
        $state.show(); 
        $occ.show(); 
        $edu.show(); 
        $minsal.show(); 
        $maxsal.show();
        
        switch(ds){
          case 'OCC_BY_STATE':
            clear_hide($occ)
            clear_hide($edu); 
            clear_hide($minsal); 
            clear_hide($maxsal);
            break;
          case 'DECLINE_JOBS':
            clear_hide($state)
            clear_hide($occ)			
            clear_hide($edu); 
            clear_hide($minsal); 
            clear_hide($maxsal);
            break;
          case 'HIGHEST_PAID_YEAR':
            clear_hide($state)
            clear_hide($occ)			
            clear_hide($edu); 
            clear_hide($minsal); 
            clear_hide($maxsal);
            break;
          case 'OCC_BY_EDU':
            clear_hide($state)
            clear_hide($occ)			
            clear_hide($year); 
            clear_hide($minsal); 
            clear_hide($maxsal);
            break;
          case 'TOT_EMP_NATION':
            clear_hide($edu);
            clear_hide($state)		
            clear_hide($year); 
            clear_hide($minsal); 
            clear_hide($maxsal);
            break;
          case 'TOT_EMP_STATE':
            clear_hide($edu);		
            clear_hide($year); 
            clear_hide($minsal); 
            clear_hide($maxsal);
            break;
          case 'EMP_STATE_DIST':
            clear_hide($edu);
            clear_hide($occ)			
            clear_hide($year); 
            clear_hide($minsal); 
            clear_hide($maxsal);
            break;
          case 'DEGREE_DIST':
            clear_hide($occ)	
            clear_hide($edu)	
            clear_hide($state)			
            clear_hide($year); 
            clear_hide($minsal); 
            clear_hide($maxsal);
            break;
          
			
          default:
            console.log('default');
            $year.show(); 
            $state.show(); 
            $occ.show(); 
            $edu.show(); 
            $minsal.show(); 
            $maxsal.show();
        }
      });
      
      if(location.search){
        qString = JSON.parse( decodeURIComponent( location.search.split('=')[1] ) );
        setSelectedValue($sel[0], qString.data_set);
        setSelectedValue($year[0], qString.year);
        setSelectedValue($state[0], qString.state);
        setSelectedValue($occ[0], qString.occ);
        setSelectedValue($edu[0], qString.edu);
        $minsal[0].value = qString.minsal || '';
        $maxsal[0].value = qString.maxsal || '';
        
        $subbtn[0].click();
      }
      
      //Trigger change event to set proper fields active
      $sel.change();
    });
