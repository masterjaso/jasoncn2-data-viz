extends layout

block content
  h1(class="text-center", style="color:#3e95cd")= title
  p(class="text-center", style="font-size:20px;font-weight:bold") An exploration of spending types and location by party during the 2016 Presidential Primary 
  
  div.essay
    p.  
      In this dataset there are various  qualitative values to work with and the singular quantitative value we sought (Disb Amt, the amount spent).  The first consideration was what qualitative classifiers were relevant to the question being asked.  The first pass was to keep all geo-location related elements (zip-code, state, city, etc...) as this felt very relevant to the 'where' aspect of the question.  However, given that this was a national race, the final 'where' classifier for best consumption turned out to be at the State level.  Another key field that was determined to be a good exploratory item that touched on expenditures was the Disbursement Type - what the transaction related to.  Lastly, given the political nature it was decided to include Party.  Other fields did not seem essential to utilize in visualizing the data.  These included things like Transaction_ID, free form comments, and the form name that the expense was submitted on.  
      #[br]#[br]
      The dashboard as presented is able to answer both of the 'where' questions as it relates to spending during the 2016 primary election.  Where in terms of state geopgraphies as well as where in terms of the industries that the funds are poured into.  Interestingly, Washington D.C. and Virginia were the two largest locations where the disbursements occured.  This was surprising, particularly for D.C. as they do not have population or electoral influence that is commensurate to the spending that occured there.  That being said, it is actually intuitive that most political spending would happen there given that the major spending types were related to digital media.  This type of purchase requires no physical presence to impact other geographies, and compound that with the fact that Washington D.C. and the northern Virginia metro area are the central hub for U.S. national political influence  creates a perfect climate to attract the lion share of all spending during the 2016 presidential primary campaign.
      
  div.controls.form-group
    h3 Data Controls
    div.form-check
      label.form-check-input #[input#party.form-check-label(name='filters' type="radio" value="p" onclick="barChart(chartDiv, data.p, 'total', 'Spending by Party'); updateControls()")] Party
    div.form-check
      label.form-check-input #[input#party.form-check-label(name='filters' type="radio" value="s" onclick="barChart(chartDiv, data.s, 'total', 'Spending by State'); updateControls()")] State
    div.form-check
      label.form-check-input #[input#party.form-check-label(name='filters' type="radio" value="t" onclick="barChart(chartDiv, data.t, 'total', 'Spending by Type'); updateControls()")] Type 
    button.btn.btn-primary(type="submit" onclick="initialScene()") Reset
    button.btn.btn-primary(type="submit" onclick="showAbout()") About the Visualization
    br
    h4 Drill-In Control
    div.form-check
      label.form-check-input #[input#party.form-check-label(name='filters2' type="radio" value="p")] Party 
    div.form-check
      label.form-check-input #[input#party.form-check-label(name='filters2' type="radio" value="s")] State 
    div.form-check
      label.form-check-input #[input#party.form-check-label(name='filters2' type="radio" value="t")] Type 
    
    
  div.chart
  
block footer
  script.
    //Setup initial view and variables to support
    window.onload = initialScene;
    var chartDiv = document.getElementsByClassName('chart')[0];
    var test;
    
    //Data sets to hold filtered values
    var drillData;
    
    function initialScene(){
      console.log('InitialScene Fired');
      barChart(chartDiv, data.totals, 'total', 'Total Spent');
    }
    
    function updateControls(){
      $('input[name=filters2]').attr('disabled', false);
      var topFilter = $('input[name=filters]:checked').val();
      $('input[name=filters2][value=' + topFilter + ']').attr('disabled', true).prop('checked', false);
    }
    
    function barChart(div, d, metric, title){
      test = d;
      //Clear any existing svg's since this is a single chart page
      d3.selectAll('svg').remove();
      //Setup Data
      var maxResults = 10;
      var min = d3.min(d, (d) => { return d[metric]});
      var max = d3.max(d, (d) => { return d[metric]});
      console.log('D', d);
      var dataSet = d.sort( (x,y) => { return d3.descending(x[metric], y[metric]); });
      dataSet = dataSet.slice(0,maxResults);
      
      //Get item label types
      var label = Object.keys(dataSet[0]._id)[0];
      var labels = []
      dataSet.forEach( (d) => {
        labels.push(d._id[label]);
      });
      
      //Margin design pattern:  https://bl.ocks.org/mbostock/3019563
      var margin = {top: 30, right: div.offsetWidth * .1, bottom: 100, left: div.offsetWidth * .1};
      var w = div.offsetWidth;
      var h = window.innerHeight * 0.7;
      
      //Set chart area with consideration for margins
      var width = w - margin.left - margin.right;
      var height = h - margin.top - margin.bottom;
      
      //tick count, padding between bars
      var ticks = d3.min( [dataSet.length, maxResults] );
      var pad = 5;
      
      //Set max number of items to visualize
      if(labels.length >= ticks) labels = labels.slice(0,10);
      
      //Create formater for value representations - significant digits w/ 2 decimal places
      var format = d3.format(".2s");
      var format2 = d3.format(",.2f");
      
      //Define the div for the tooltip
      var tooltip = d3.select("body").append("div")	
      .attr("class", "tooltip")     
      .style("opacity", 0);
      
      //Create canvas with svg surrounded by proper margins to work with
      var canvas = d3.select(div)
        .append("svg")
          .attr("class", "canvas")
          .attr("width", width + margin.left + margin.right)
          .attr("height", height + margin.top + margin.bottom)
        .append("g")
          .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
          
      //Create title
      canvas.append("text")
        .attr("x", (width / 2))             
        .attr("y", 0 - (margin.top / 2))
        .attr("text-anchor", "middle")  
        .style("font-size", "16px") 
        .style("text-decoration", "underline")  
        .text(title);
      
      //Establish Axis elements
      var y_dom = max === min
        ? [max, 0]
        : [max, min]
        
      var y_scale = d3.scaleLinear()
        .domain(y_dom)
        .range([0, height]);
        
      var x_scale = d3.scaleBand()
        .domain(labels)
        .range([0,width]);

      var y_axis = d3.axisLeft(y_scale)
        .tickFormat( (d) => { return format(d)})
        //.scale(y_scale);
        
      var x_axis = d3.axisBottom(x_scale)
        //.scale(x_scale);
      
      //Draw the actual axis's and place properly
      canvas.append("g")
        .attr("class", "y_axis")
        .attr("transform", "translate(0,0)")
        .call(y_axis);
      canvas.append("g")
        .attr("class", "x_axis")
        .attr("transform", "translate(0,"+height+")")
        .call(x_axis)
          .selectAll(".tick text")
          .call(wrap, x_scale.bandwidth());
      
      //Attach dataSet to rects to draw the bars
      canvas
      .selectAll("rect")
      .data(dataSet)
      .enter()
        .append("rect")
        .attr("width", (d) => {return width/ticks - pad;})
        .attr("height", (d) => {return d3.max( [height * (d[metric]/max), 5]);})
        .attr("y", (d) => {return height - d3.max( [height * (d[metric]/max), 5]);})
        .attr("x", (d,i) => {return i * (width/ticks) + pad/2;})
        .attr("fill", (d,i) => {return d3.schemeCategory10[i]})
        .on("mouseover", (d,i,node) => {
          d3.select(node[i]).attr("fill", d3.schemePaired[4]);
        })
        .on("mousemove", (d,i) => {		
          tooltip.transition()		
              .duration(100)		
              .style("opacity", .9);		
          tooltip.html( (labels[i] || "Totals") + ": "  + format2(d[metric]))	
              .style("left", (d3.event.pageX) + "px")		
              .style("top", (d3.event.pageY - 28) + "px");	
          })					
        .on("mouseout", (d,i,node) => {
            tooltip.transition()		
                .duration(500)		
                .style("opacity", 0);	
            d3.select(node[i]).attr("fill", d3.schemeCategory10[i]);
        })
        .on("click", (d,i,node) => {
          drillDown(labels[i]);
          tooltip.transition()		
                .duration(100)		
                .style("opacity", 0);	
        })
      .exit().remove();
    }
    
    function wrap(text, width) {
      text.each(function() {
        var text = d3.select(this),
        words = text.text().split(/\s+/).reverse(),
        word,
        line = [],
        lineNumber = 0,
        lineHeight = 1.1, // ems
        y = text.attr("y"),
        dy = parseFloat(text.attr("dy")),
        tspan = text.text(null).append("tspan").attr("x", 0).attr("y", y).attr("dy", dy + "em")
        
        while (word = words.pop()) {
          line.push(word)
          tspan.text(line.join(" "))
          
          if (tspan.node().getComputedTextLength() > width) {
            line.pop()
            tspan.text(line.join(" "))
            line = [word]
            tspan = text.append("tspan").attr("x", 0).attr("y", y).attr("dy", `${++lineNumber * lineHeight + dy}em`).text(word)
          }
        }
      })
    }
    
    function showAbout(){
      alert('This is a drill down story visualization.  ' +
      'We start with some textual information for context the is static throughout all views so the user can ' +
      'reference it at any time during their drill in discovery.  There are a set of controls on the left that ' +
      'allow the user to set the top level of data to be viewed to one of the three primary parameters:  Party, State, or Type.  ' +
      'These radio buttons not only set the parameters, but also act as triggers to update the visual data being displayed.  '  +
      'Annotations are provided on mouseover and hover events with highlights indicating which data element is being ' +
      'inspected at the time.  This allows the user to move from the visual high level details with abbreviated values ' +
      'to the gainular details of specific amounts within the data set being viewed at the time.  The bars within the visual ' +
      'also have mouseclick events to act as triggers which create a deeper level view by adding one of the other ' +
      'filter types to the grouping.  This allows the user to get very fine details about specific combinations of ' +
      'party, state, and type to better understand where the primary spending occured both geographically and industry-wise.  ' +
      'Lastly, to keep the visual clean, we focus on the top 10 in any parameter set so as to prevent clutter and visual confusion.');
    }
    
    function drillDown(label){
      //Get filters
      var match = $('input[name=filters]:checked').val();
      var drill = $('input[name=filters2]:checked').val();
      
      //Ensure 2 filters selected else notify the user and stop
      if(!match || !drill){
        alert('Please select 2 filters from Data Controls to drill into the data');
        return;
      }
      
      var payload = {match: match, drill: drill, matchBy: label};
      var titleText;
      
      switch( match ){
        case 'p':
          titleText = 'Party = ' + label + ' -- By: ';
          break;
        case 's':
          titleText = 'State = ' + label + ' -- By: ';;
          break;
        case 't':
          titleText = 'Type = ' + label + ' -- By: ';;
          break;
        default:
          return;
      }
      
      switch( drill ){
        case 'p':
          titleText += 'Party';
          break;
        case 's':
          titleText += 'State';;
          break;
        case 't':
          titleText += 'Type';;
          break;
        default:
          return;
      }
      
      $.ajax({
        type: "POST",
        url: "/",
        data: payload,
        success: (d)=>{
          console.log('HERE',d);
          barChart(chartDiv, d.data, 'total', titleText);
          $('input[name=filters]').prop('checked', false);
          $('input[name=filters2]').prop('checked', false);
          $('input[name=filters2]').attr('disabled', false);
        },
        dataType: "json"
      });
    }
    
    function circleGraph(div, d, metric, title){
      
    }